{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"parser"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Take2","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take2","preciseIdentifier":"s:7Parsing7ParsersO5Take2V"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser that runs two parsers, returning both outputs in a tuple."}]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser to run immediately after this parser."}]}],"name":"parser"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This operator is used to gather up multiple values and can bundle them into a single data type"},{"type":"text","text":" "},{"type":"text","text":"when used alongside the "},{"isActive":true,"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter\/map(_:)","type":"reference"},{"type":"text","text":" operator."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the following example, two "},{"code":"Double","type":"codeVoice"},{"type":"text","text":"s are parsed using "},{"code":"take(_:)-1fw8y","type":"codeVoice"},{"type":"text","text":" before they are"},{"type":"text","text":" "},{"type":"text","text":"combined into a "},{"code":"Point","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["struct Point { var x, y: Double }","","var input = \"-1.5,1\"[...].utf8","let output = Double.parser()","  .skip(\",\")","  .take(Double.parser())","  .map(Point.init)","  .parse(&input) \/\/ => Point(x: -1.5, y: 1)","precondition(Substring(input) == \"\")"],"syntax":"swift","type":"codeListing"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter\/take(_:)-52f49"},"abstract":[{"text":"Returns a parser that runs this parser and the given parser, returning both outputs in a","type":"text"},{"text":" ","type":"text"},{"text":"tuple.","type":"text"}],"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/parsing\/parsers\/filter\/take(_:)-52f49"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"modules":[{"name":"Parsing"}],"extendedModule":"Parsing","title":"take(_:)","externalID":"s:7Parsing6ParserPAAE4takeyAA7ParsersO5Take2Vy_xqd__Gqd__AaBRd__5InputQyd__AJRtzlF::SYNTHESIZED::s:7Parsing7ParsersO6FilterV","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"<"},{"text":"P","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Take2","preciseIdentifier":"s:7Parsing7ParsersO5Take2V","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":">","kind":"text"}],"symbolKind":"method","role":"symbol","roleHeading":"Instance Method"},"schemaVersion":{"major":0,"minor":2,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter\/Parser-Implementations"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","title":"Parsing","url":"\/documentation\/parsing","role":"collection","abstract":[]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Take2":{"role":"symbol","url":"\/documentation\/parsing\/parsers\/take2","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Take2"}],"navigatorTitle":[{"kind":"identifier","text":"Take2"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Take2","type":"topic","title":"Parsers.Take2","abstract":[{"text":"A parser that runs two parsers, one after the other, and returns both outputs in a tuple.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Filter":{"kind":"symbol","navigatorTitle":[{"text":"Filter","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter","title":"Parsers.Filter","type":"topic","url":"\/documentation\/parsing\/parsers\/filter","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Filter","kind":"identifier"}],"abstract":[{"type":"text","text":"A parser that filters the output of an upstream parser when it does not satisfy a predicate."}],"role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Filter/Parser-Implementations":{"title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter\/Parser-Implementations","type":"topic","role":"collectionGroup","abstract":[],"url":"\/documentation\/parsing\/parsers\/filter\/parser-implementations","kind":"article"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Filter/map(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO3MapV","text":"Map"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}],"url":"\/documentation\/parsing\/parsers\/filter\/map(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter\/map(_:)","title":"map(_:)","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Returns a parser that transforms the output of this parser with a given closure."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Filter/take(_:)-52f49":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"take"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Take2","preciseIdentifier":"s:7Parsing7ParsersO5Take2V"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":">"}],"url":"\/documentation\/parsing\/parsers\/filter\/take(_:)-52f49","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Filter\/take(_:)-52f49","title":"take(_:)","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Returns a parser that runs this parser and the given parser, returning both outputs in a"},{"type":"text","text":" "},{"type":"text","text":"tuple."}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","title":"Parser","url":"\/documentation\/parsing\/parser","role":"symbol","abstract":[{"type":"text","text":"Declares a type that can parse an "},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value."}],"navigatorTitle":[{"kind":"identifier","text":"Parser"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","type":"topic","title":"Parsers","url":"\/documentation\/parsing\/parsers","role":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}]}}}