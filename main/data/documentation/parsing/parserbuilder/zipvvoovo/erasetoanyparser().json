{"metadata":{"roleHeading":"Instance Method","role":"symbol","modules":[{"name":"Parsing"}],"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AnyParser","preciseIdentifier":"s:7Parsing9AnyParserV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"externalID":"s:7Parsing6ParserPAAE010eraseToAnyB0AA0eB0Vy5InputQz6OutputQzGyF::SYNTHESIZED::s:7Parsing13ParserBuilderO9ZipVVOOVOV","title":"eraseToAnyParser()","extendedModule":"Parsing"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVOOVO","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVOOVO\/Parser-Implementations"]]},"kind":"symbol","abstract":[{"text":"Wraps this parser with a type eraser.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing9AnyParserV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","text":"AnyParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":"An "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","isActive":true,"type":"reference"},{"type":"text","text":" wrapping this parser."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This form of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type erasure"}]},{"type":"text","text":" preserves abstraction across API boundaries, such as different"},{"type":"text","text":" "},{"type":"text","text":"modules."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you expose your composed parsers as the "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","isActive":true,"type":"reference"},{"type":"text","text":" type, you can change the underlying"},{"type":"text","text":" "},{"type":"text","text":"implementation over time without affecting existing clients."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Equivalent to passing "},{"type":"codeVoice","code":"self"},{"type":"text","text":" to "},{"type":"codeVoice","code":"AnyParser.init"},{"type":"text","text":"."}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVOOVO\/eraseToAnyParser()","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parserbuilder\/zipvvoovo\/erasetoanyparser()"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","role":"collection","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic","url":"\/documentation\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVOOVO/Parser-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/parser-implementations","role":"collectionGroup","abstract":[],"title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVOOVO\/Parser-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVOOVO":{"kind":"symbol","type":"topic","navigatorTitle":[{"text":"ZipVVOOVO","kind":"identifier"}],"url":"\/documentation\/parsing\/parserbuilder\/zipvvoovo","role":"symbol","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ZipVVOOVO","kind":"identifier"}],"title":"ParserBuilder.ZipVVOOVO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVOOVO"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVOOVO/eraseToAnyParser()":{"abstract":[{"type":"text","text":"Wraps this parser with a type eraser."}],"url":"\/documentation\/parsing\/parserbuilder\/zipvvoovo\/erasetoanyparser()","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"eraseToAnyParser"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"AnyParser","preciseIdentifier":"s:7Parsing9AnyParserV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":">"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVOOVO\/eraseToAnyParser()","kind":"symbol","title":"eraseToAnyParser()"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"role":"symbol","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"title":"ParserBuilder","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"type":"topic","url":"\/documentation\/parsing\/parserbuilder"},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","kind":"symbol","navigatorTitle":[{"text":"AnyParser","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"A type-erased parser of "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" from "},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}],"title":"AnyParser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/anyparser"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parse"}],"role":"symbol","abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"title":"Parse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"type":"topic","url":"\/documentation\/parsing\/parse"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"type":"topic","url":"\/documentation\/parsing\/parser"}}}