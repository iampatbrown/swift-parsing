{"kind":"symbol","abstract":[{"type":"text","text":"Returns a parser that replaces the "},{"type":"codeVoice","code":"Void"},{"text":" output of this parser with the output of a given","type":"text"},{"text":" ","type":"text"},{"text":"closure.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"transform"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MapConstant","preciseIdentifier":"s:7Parsing7ParsersO11MapConstantV","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/MapConstant"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"inlineContent":[{"text":"A parser of outputs.","type":"text"}],"type":"paragraph"}]},{"kind":"parameters","parameters":[{"name":"transform","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that returns an output.","type":"text"}]}]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A printer-friendly version of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-2e6si"},{"type":"text","text":" for "},{"code":"Void","type":"codeVoice"},{"type":"text","text":" outputs, so long as"},{"type":"text","text":" "},{"code":"NewOutput","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","code":["enum Role: String {","  case admin","  case guest","  case member","}","","let role = OneOf {","  \"admin\".map { Role.admin }","  \"guest\".map { Role.guest }","  \"member\".map { Role.member }","}","","try role.parse(\"admin\")  \/\/ Role.admin","role.print(.guest)       \/\/ \"guest\""],"type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parserbuilder\/zipoovvv\/map(_:)-98oot"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOOVVV","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOOVVV\/Parser-Implementations"]]},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"symbolKind":"method","modules":[{"name":"Parsing"}],"roleHeading":"Instance Method","role":"symbol","extendedModule":"Parsing","title":"map(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewOutput","kind":"genericParameter"},{"text":">(() -> ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"MapConstant","preciseIdentifier":"s:7Parsing7ParsersO11MapConstantV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"NewOutput","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:7Parsing6ParserPAAE3mapyAA7ParsersO11MapConstantVy_xqd__Gqd__yXEyt6OutputRtzlF::SYNTHESIZED::s:7Parsing13ParserBuilderO8ZipOOVVVV"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOOVVV\/map(_:)-98oot"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParserBuilder"}],"role":"symbol","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"text":" ","type":"text"},{"text":"runs a number of parsers, one after the other, and accumulates their outputs.","type":"text"}],"title":"ParserBuilder","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserBuilder"}],"type":"topic","url":"\/documentation\/parsing\/parserbuilder"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipOOVVV/Parser-Implementations":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOOVVV\/Parser-Implementations","url":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/parser-implementations","title":"Parser Implementations","kind":"article","role":"collectionGroup","abstract":[],"type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"symbol","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"title":"Parsers","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parsers"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/MapConstant":{"abstract":[{"type":"text","text":"A parser that replaces another parserâ€™s "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" output with some new output."}],"url":"\/documentation\/parsing\/parsers\/mapconstant","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/MapConstant","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MapConstant"}],"title":"Parsers.MapConstant","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MapConstant"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser/map(_:)-2e6si":{"abstract":[{"type":"text","text":"Returns a parser that replaces the "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" output of this parser with the output of a given"},{"type":"text","text":" "},{"type":"text","text":"closure."}],"url":"\/documentation\/parsing\/parser\/map(_:)-2e6si","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser\/map(_:)-2e6si","type":"topic","role":"symbol","title":"map(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(() -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"MapConstant","preciseIdentifier":"s:7Parsing7ParsersO11MapConstantV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":">"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parse"}],"role":"symbol","abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"title":"Parse","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parse"}],"type":"topic","url":"\/documentation\/parsing\/parse"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipOOVVV":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOOVVV","url":"\/documentation\/parsing\/parserbuilder\/zipoovvv","title":"ParserBuilder.ZipOOVVV","navigatorTitle":[{"kind":"identifier","text":"ZipOOVVV"}],"kind":"symbol","role":"symbol","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ZipOOVVV"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"type":"topic","url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipOOVVV/map(_:)-98oot":{"role":"symbol","url":"\/documentation\/parsing\/parserbuilder\/zipoovvv\/map(_:)-98oot","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipOOVVV\/map(_:)-98oot","type":"topic","title":"map(_:)","abstract":[{"type":"text","text":"Returns a parser that replaces the "},{"type":"codeVoice","code":"Void"},{"type":"text","text":" output of this parser with the output of a given"},{"type":"text","text":" "},{"type":"text","text":"closure."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewOutput"},{"kind":"text","text":">(() -> "},{"kind":"typeIdentifier","text":"NewOutput"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO11MapConstantV","kind":"typeIdentifier","text":"MapConstant"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"NewOutput"},{"text":">","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","role":"collection","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic","url":"\/documentation\/parsing"}}}