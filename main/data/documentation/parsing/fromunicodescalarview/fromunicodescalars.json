{"deprecationSummary":[{"inlineContent":[{"text":"Use 'From(.unicodeScalars)' instead.","type":"text"}],"type":"paragraph"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/parsing\/fromunicodescalarview\/fromunicodescalars"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView\/fromUnicodeScalars"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView"]]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"fromUnicodeScalars","kind":"identifier"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Substring","preciseIdentifier":"s:Ss"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UnicodeScalarView","preciseIdentifier":"s:Ss17UnicodeScalarViewV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"}],"languages":["swift"],"platforms":["Linux"]}]}],"sections":[],"metadata":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"fromUnicodeScalars"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss","text":"Substring"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss17UnicodeScalarViewV","text":"UnicodeScalarView"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"}],"role":"symbol","title":"fromUnicodeScalars","symbolKind":"property","externalID":"s:7Parsing21FromUnicodeScalarViewV04fromC7ScalarsyxSs0cdE0Vcvp","modules":[{"name":"Parsing"}],"roleHeading":"Instance Property","platforms":[]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView/fromUnicodeScalars":{"url":"\/documentation\/parsing\/fromunicodescalarview\/fromunicodescalars","abstract":[],"title":"fromUnicodeScalars","kind":"symbol","deprecated":true,"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"fromUnicodeScalars"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Substring","preciseIdentifier":"s:Ss"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UnicodeScalarView","preciseIdentifier":"s:Ss17UnicodeScalarViewV"},{"text":") -> ","kind":"text"},{"text":"Input","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView\/fromUnicodeScalars","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"role":"symbol","abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"type":"topic","url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"deprecated":true,"kind":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FromUnicodeScalarView"}],"title":"FromUnicodeScalarView","role":"symbol","url":"\/documentation\/parsing\/fromunicodescalarview","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FromUnicodeScalarView"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","kind":"symbol","role":"collection","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"text":" ","type":"text"},{"text":"performance, generality, and ergonomics.","type":"text"}],"title":"Parsing","type":"topic","url":"\/documentation\/parsing"}}}