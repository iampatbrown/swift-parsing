{"sections":[],"variants":[{"paths":["\/documentation\/casepaths\/\/(_:)-9tuff"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"\/"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"internalParam","text":"embed"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> ("},{"kind":"typeIdentifier","text":"Root"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"?"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"A function that can attempt to extract associated values from an enum.","type":"text"}]}]},{"parameters":[{"name":"embed","content":[{"inlineContent":[{"text":"An enum case initializer.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"Use this operator to create new transform functions to pass to higher-order methods like"},{"type":"text","text":" "},{"type":"codeVoice","code":"compactMap"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["[Result<Int, Error>.success(42), .failure(MyError()]","  .compactMap(\/Result.success)","\/\/ [42]"]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"This operator is only intended to be used with enum case initializers. Its behavior is","type":"text"},{"text":" ","type":"text"},{"text":"otherwise undefined.","type":"text"}]}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/\/(_:)-9tuff","interfaceLanguage":"swift"},"abstract":[{"text":"Returns a function that can attempt to extract associated values from the given enum case","type":"text"},{"text":" ","type":"text"},{"text":"initializer.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"externalID":"s:9CasePaths1dopyq_Sgxcxq_cr0_lF","symbolKind":"op","role":"symbol","title":"\/(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"\/"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Root"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">(("},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") -> (","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"roleHeading":"Operator","modules":[{"name":"CasePaths"}]},"references":{"doc://co.pointfree.Parsing/documentation/CasePaths":{"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths","role":"collection","url":"\/documentation\/casepaths","abstract":[],"title":"CasePaths"},"doc://co.pointfree.Parsing/documentation/CasePaths//(_:)-9tuff":{"title":"\/(_:)","kind":"symbol","abstract":[{"type":"text","text":"Returns a function that can attempt to extract associated values from the given enum case"},{"type":"text","text":" "},{"type":"text","text":"initializer."}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/CasePaths\/\/(_:)-9tuff","url":"\/documentation\/casepaths\/\/(_:)-9tuff","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"\/"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"text":"Root","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") -> (","kind":"text"},{"text":"Root","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":"?","kind":"text"}]}}}