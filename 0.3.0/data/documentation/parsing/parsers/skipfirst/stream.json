{"abstract":[{"type":"text","text":"Transforms the receiver parser into one that can parse streams of input."}],"schemaVersion":{"major":0,"minor":2,"patch":0},"variants":[{"paths":["\/documentation\/parsing\/parsers\/skipfirst\/stream"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO","text":"Parsers","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO6StreamV","text":"Stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"> { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"For example, the following parser can parse an integer followed by a newline from a collection"},{"type":"text","text":" "},{"type":"text","text":"of UTF8 bytes:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))"]},{"inlineContent":[{"type":"text","text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let newlineSeparatedIntegers = Parsers.Integer<ArraySlice<UInt8>, Int>()","  .skip(StartsWith(\"\\n\".utf8))","  .stream"]},{"inlineContent":[{"text":"And then it can be used on a stream, such as values coming from standard in:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","newlineSeparatedIntegers","  .parse(&stdin)"]}]}],"metadata":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":".","type":"text"}]},"roleHeading":"Instance Property","externalID":"s:7Parsing6ParserPAASm5InputRpzrlE6streamAA7ParsersO6StreamVy_xGvp::SYNTHESIZED::s:7Parsing7ParsersO9SkipFirstV","extendedModule":"Parsing","symbolKind":"property","modules":[{"name":"Parsing"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stream"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO6StreamV","kind":"typeIdentifier","text":"Stream"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"role":"symbol","title":"stream"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/SkipFirst","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/SkipFirst\/Parser-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/SkipFirst\/stream"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing":{"abstract":[],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","title":"Parsing","url":"\/documentation\/parsing","kind":"symbol","role":"collection","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/Stream":{"title":"Parsers.Stream","abstract":[{"text":"A parser that can parse streams of input.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/Stream","url":"\/documentation\/parsing\/parsers\/stream","navigatorTitle":[{"text":"Stream","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","title":"Parsers","navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers","kind":"symbol","role":"symbol","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/SkipFirst/Parser-Implementations":{"abstract":[],"title":"Parser Implementations","url":"\/documentation\/parsing\/parsers\/skipfirst\/parser-implementations","role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/SkipFirst\/Parser-Implementations"},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/SkipFirst/stream":{"type":"topic","url":"\/documentation\/parsing\/parsers\/skipfirst\/stream","abstract":[{"text":"Transforms the receiver parser into one that can parse streams of input.","type":"text"}],"kind":"symbol","role":"symbol","title":"stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/SkipFirst\/stream","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"stream","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Parsers","preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Stream","preciseIdentifier":"s:7Parsing7ParsersO6StreamV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers/SkipFirst":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers\/SkipFirst","abstract":[{"type":"text","text":"A parser that runs two parsers, one after the other, taking only the output of the second"},{"type":"text","text":" "},{"type":"text","text":"parser."}],"navigatorTitle":[{"kind":"identifier","text":"SkipFirst"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SkipFirst"}],"type":"topic","role":"symbol","url":"\/documentation\/parsing\/parsers\/skipfirst","kind":"symbol","title":"Parsers.SkipFirst"}}}